openapi: 3.1.0
info:
  title: Token & Player Service API
  version: 1.2.0
  description: |
    This OpenAPI specification describes a token service combined with a
    simple player management API and Google OAuth integration.  Clients
    can obtain a signed JSON Web Token (JWT) by supplying a username to
    the **POST /token** endpoint; the token must then be supplied as a
    bearer credential when calling protected endpoints such as
    **GET /protected**.  For federated login the service supports
    Google OAuth via the **/oauth/signin** and **/oauth/callback**
    endpoints.  Sessions are stored in Deno KV and a helper endpoint
    **/session** returns the current session identifier.  In
    addition to authentication, the API exposes CRUD operations for
    managing players inspired by the
    [LineupCoach](https://github.com/zackJKnight/Lineup.Coach) Angular
    client.  Player records and session data are persisted in
    [Deno KV] which provides a globally distributed, strongly consistent
    key‑value store.
servers:
  - url: https://{baseUrl}
    description: Deployed service endpoint
    variables:
      baseUrl:
        default: your‑project.deno.dev
        description: Replace with your actual Deno Deploy domain
paths:
  /token:
    post:
      summary: Generate a JWT
      description: |
        Issue a new JSON Web Token.  The server accepts a JSON body
        containing a `username` and optional `password`.  The password
        is ignored in this demonstration implementation.  On success
        the response includes a signed JWT that expires after one
        hour.  If the `username` is missing or invalid the server
        returns a 400 error.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Identifier of the user requesting the token
                password:
                  type: string
                  description: Optional password (ignored)
              required:
                - username
            example:
              username: alice
              password: secret
      responses:
        '200':
          description: Token successfully generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The signed JWT
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Missing or invalid username
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: Missing or invalid username
  /protected:
    get:
      summary: Access a protected resource
      description: |
        Retrieve a protected resource.  This endpoint requires an
        `Authorization` header containing a bearer token obtained from
        **POST /token**.  If the token is valid and not expired the
        server responds with a greeting.  Otherwise a 401 error is
        returned.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response with a greeting
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Access granted: you are authorized
        '401':
          description: Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: Invalid or expired token

  /players:
    get:
      summary: List all players
      description: |
        Retrieve an array of all player records stored in the database.  Each
        element in the response includes the player's unique `id` and other
        properties defined by the Player schema.  No authentication is
        required to call this endpoint.
      responses:
        '200':
          description: An array of players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
    post:
      summary: Create a new player
      description: |
        Create a new player.  The request body should include all required
        Player fields except for `id`.  The server generates a unique
        identifier if one is not provided.  On success the response
        includes the newly created player with its assigned `id`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPlayer'
      responses:
        '201':
          description: Player created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /players/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: Unique identifier of the player
    get:
      summary: Retrieve a player by ID
      description: |
        Fetch a single player record by its `id`.  Returns a 404 error
        if no player exists with the specified identifier.
      responses:
        '200':
          description: A single player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      summary: Update an existing player
      description: |
        Replace an existing player record with the data supplied in the
        request body.  The player must already exist; otherwise a 404
        error is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPlayer'
      responses:
        '200':
          description: Player updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      summary: Delete a player
      description: |
        Remove a player from the database.  If the player does not
        exist the server returns a 404 error.  On successful deletion
        the response has no content.
      responses:
        '204':
          description: Player deleted
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Schema representing a complete player record stored in the database.
    Player:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier assigned by the server
        firstName:
          type: string
        lastName:
          type: string
        isPresent:
          type: boolean
          nullable: true
        positionPreferenceRank:
          type: object
          properties:
            ranking:
              type: array
              items:
                type: string
              description: Ordered list of position names
          required:
            - ranking
        startingPositionIds:
          type: array
          items:
            type: integer
        placementScore:
          type: number
          nullable: true
        fitScore:
          type: number
          nullable: true
        benchIds:
          type: array
          items:
            type: integer
      required:
        - id
        - firstName
        - lastName
        - positionPreferenceRank
        - startingPositionIds
        - benchIds

  /oauth/signin:
    get:
      summary: Initiate Google OAuth sign‑in
      description: |
        Redirect the client to Google's OAuth consent page to start
        the authentication flow.  The server constructs an
        authorization request using the client ID defined in the
        `GOOGLE_CLIENT_ID` environment variable.  On success the
        response is a 302 redirect to Google.  No authentication is
        required to call this endpoint.
      responses:
        '302':
          description: Redirect to Google for user consent
          headers:
            Location:
              description: URL of the Google authorization endpoint
              schema:
                type: string

  /oauth/callback:
    get:
      summary: Complete Google OAuth callback
      description: |
        Google redirects back to this endpoint after the user grants
        permission.  The server exchanges the authorization code for
        access tokens and stores session information in Deno KV.  On
        success the response is a redirect back to the application
        root.  The server also sets a signed session cookie that
        identifies the authenticated user.
      responses:
        '302':
          description: Redirect back to the application after completing OAuth
          headers:
            Set-Cookie:
              description: Session cookie containing an opaque session ID
              schema:
                type: string

  /oauth/signout:
    get:
      summary: Sign out the current user
      description: |
        Invalidate the current session by removing it from Deno KV and
        clearing the session cookie.  Always succeeds whether or not
        a session exists.
      responses:
        '204':
          description: Session cleared

  /session:
    get:
      summary: Retrieve the current session identifier
      description: |
        Return the opaque session ID for the current user if logged in.
        If no session is active the `sessionId` property will be
        `null`.  Clients can use this endpoint to determine whether
        they are authenticated.
      responses:
        '200':
          description: Session information
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                    nullable: true

    # Schema used when creating or updating a player.  The `id` field is
    # omitted because it is generated by the server.
    NewPlayer:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        isPresent:
          type: boolean
          nullable: true
        positionPreferenceRank:
          type: object
          properties:
            ranking:
              type: array
              items:
                type: string
          required:
            - ranking
        startingPositionIds:
          type: array
          items:
            type: integer
        placementScore:
          type: number
          nullable: true
        fitScore:
          type: number
          nullable: true
        benchIds:
          type: array
          items:
            type: integer
      required:
        - firstName
        - lastName
        - positionPreferenceRank
        - startingPositionIds
        - benchIds